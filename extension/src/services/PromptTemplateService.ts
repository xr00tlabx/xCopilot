import { PromptTemplate } from '../types';
import { Logger } from '../utils/Logger';

/**
 * Servi√ßo para gerenciar templates de prompt contextuais
 */
export class PromptTemplateService {
    private static instance: PromptTemplateService;
    private templates: PromptTemplate[] = [];

    private constructor() {
        this.initializeTemplates();
    }

    static getInstance(): PromptTemplateService {
        if (!PromptTemplateService.instance) {
            PromptTemplateService.instance = new PromptTemplateService();
        }
        return PromptTemplateService.instance;
    }

    /**
     * Inicializa os templates padr√£o
     */
    private initializeTemplates(): void {
        this.templates = [
            // Templates gerais
            {
                id: 'explain-code',
                title: 'üîç Explicar C√≥digo',
                description: 'Explica o que o c√≥digo selecionado faz',
                prompt: 'Explique detalhadamente o que este c√≥digo faz, como funciona e qual √© seu prop√≥sito:',
                requiresSelection: true
            },
            {
                id: 'find-bugs',
                title: 'üêõ Encontrar Bugs',
                description: 'Analisa o c√≥digo em busca de poss√≠veis bugs',
                prompt: 'Analise este c√≥digo em busca de bugs, problemas de l√≥gica, edge cases n√£o tratados e poss√≠veis melhorias:',
                requiresSelection: true
            },
            {
                id: 'optimize',
                title: '‚ö° Otimizar Performance',
                description: 'Sugere otimiza√ß√µes de performance',
                prompt: 'Analise este c√≥digo e sugira otimiza√ß√µes de performance, melhorias de algoritmo e boas pr√°ticas:',
                requiresSelection: true
            },
            {
                id: 'add-comments',
                title: 'üìù Adicionar Coment√°rios',
                description: 'Adiciona coment√°rios explicativos ao c√≥digo',
                prompt: 'Adicione coment√°rios explicativos detalhados a este c√≥digo, mantendo o c√≥digo original:',
                requiresSelection: true
            },
            {
                id: 'write-tests',
                title: 'üß™ Escrever Testes',
                description: 'Cria testes unit√°rios para o c√≥digo',
                prompt: 'Escreva testes unit√°rios abrangentes para este c√≥digo, incluindo casos de teste positivos, negativos e edge cases:',
                requiresSelection: true
            },
            {
                id: 'refactor',
                title: 'üîÑ Refatorar C√≥digo',
                description: 'Refatora o c√≥digo para melhor legibilidade',
                prompt: 'Refatore este c√≥digo para melhorar legibilidade, manutenibilidade e ader√™ncia √†s boas pr√°ticas:',
                requiresSelection: true
            },

            // Templates espec√≠ficos para JavaScript/TypeScript
            {
                id: 'add-types',
                title: 'üè∑Ô∏è Adicionar Tipos TypeScript',
                description: 'Adiciona tipagem TypeScript ao c√≥digo',
                prompt: 'Converta este c√≥digo JavaScript para TypeScript, adicionando tipos apropriados e interfaces:',
                requiresSelection: true,
                supportedFileTypes: ['javascript', 'typescript']
            },
            {
                id: 'async-await',
                title: '‚è≥ Converter para Async/Await',
                description: 'Converte Promises para async/await',
                prompt: 'Converta este c√≥digo que usa Promises para async/await, mantendo o tratamento de erros:',
                requiresSelection: true,
                supportedFileTypes: ['javascript', 'typescript']
            },

            // Templates para Python
            {
                id: 'add-docstrings',
                title: 'üìñ Adicionar Docstrings',
                description: 'Adiciona docstrings no formato Google/Sphinx',
                prompt: 'Adicione docstrings detalhadas no formato Google a este c√≥digo Python:',
                requiresSelection: true,
                supportedFileTypes: ['python']
            },
            {
                id: 'type-hints',
                title: 'üéØ Adicionar Type Hints',
                description: 'Adiciona type hints ao c√≥digo Python',
                prompt: 'Adicione type hints apropriadas a este c√≥digo Python, incluindo imports necess√°rios:',
                requiresSelection: true,
                supportedFileTypes: ['python']
            },

            // Templates para an√°lise de arquivo completo
            {
                id: 'code-review',
                title: 'üëÄ Review Completo',
                description: 'Faz um review completo do arquivo',
                prompt: 'Fa√ßa um code review completo deste arquivo, analisando estrutura, padr√µes, poss√≠veis melhorias e problemas:',
                requiresSelection: false
            },
            {
                id: 'security-audit',
                title: 'üîí Auditoria de Seguran√ßa',
                description: 'Analisa vulnerabilidades de seguran√ßa',
                prompt: 'Fa√ßa uma auditoria de seguran√ßa deste c√≥digo, identificando vulnerabilidades e sugerindo corre√ß√µes:',
                requiresSelection: false
            },

            // Templates para Git/Commit
            {
                id: 'commit-message',
                title: 'üìù Mensagem de Commit',
                description: 'Sugere mensagem de commit baseada nas mudan√ßas',
                prompt: 'Baseado nas mudan√ßas no c√≥digo, sugira uma mensagem de commit clara e descritiva seguindo conven√ß√µes:',
                requiresSelection: true
            }
        ];

        Logger.info(`Initialized ${this.templates.length} prompt templates`);
    }

    /**
     * Obt√©m templates compat√≠veis com o tipo de arquivo atual
     */
    getTemplatesForFileType(fileType?: string): PromptTemplate[] {
        if (!fileType) {
            return this.templates.filter(t => !t.supportedFileTypes);
        }

        return this.templates.filter(template => 
            !template.supportedFileTypes || 
            template.supportedFileTypes.includes(fileType)
        );
    }

    /**
     * Obt√©m templates que requerem sele√ß√£o de c√≥digo
     */
    getSelectionRequiredTemplates(fileType?: string): PromptTemplate[] {
        return this.getTemplatesForFileType(fileType).filter(t => t.requiresSelection);
    }

    /**
     * Obt√©m templates que funcionam sem sele√ß√£o
     */
    getNoSelectionTemplates(fileType?: string): PromptTemplate[] {
        return this.getTemplatesForFileType(fileType).filter(t => !t.requiresSelection);
    }

    /**
     * Busca template por ID
     */
    getTemplateById(id: string): PromptTemplate | undefined {
        return this.templates.find(t => t.id === id);
    }

    /**
     * Obt√©m sugest√µes de templates baseadas no contexto
     */
    getSuggestedTemplates(fileType?: string, hasSelection: boolean = false): PromptTemplate[] {
        const availableTemplates = this.getTemplatesForFileType(fileType);
        
        if (hasSelection) {
            // Priorizar templates que usam sele√ß√£o
            return [
                ...availableTemplates.filter(t => t.requiresSelection),
                ...availableTemplates.filter(t => !t.requiresSelection)
            ].slice(0, 6); // Limitar a 6 sugest√µes
        } else {
            // Mostrar apenas templates que n√£o precisam de sele√ß√£o
            return availableTemplates.filter(t => !t.requiresSelection).slice(0, 4);
        }
    }

    /**
     * Adiciona template customizado
     */
    addCustomTemplate(template: PromptTemplate): void {
        this.templates.push(template);
        Logger.info(`Added custom template: ${template.title}`);
    }

    /**
     * Remove template customizado
     */
    removeCustomTemplate(id: string): boolean {
        const index = this.templates.findIndex(t => t.id === id);
        if (index > -1) {
            this.templates.splice(index, 1);
            Logger.info(`Removed template: ${id}`);
            return true;
        }
        return false;
    }

    /**
     * Obt√©m estat√≠sticas dos templates
     */
    getTemplateStats(): { 
        total: number; 
        byFileType: Record<string, number>; 
        requireSelection: number;
        general: number;
    } {
        const byFileType: Record<string, number> = {};
        let requireSelection = 0;
        let general = 0;

        this.templates.forEach(template => {
            if (template.requiresSelection) {
                requireSelection++;
            }

            if (!template.supportedFileTypes) {
                general++;
            } else {
                template.supportedFileTypes.forEach(type => {
                    byFileType[type] = (byFileType[type] || 0) + 1;
                });
            }
        });

        return {
            total: this.templates.length,
            byFileType,
            requireSelection,
            general
        };
    }
}
