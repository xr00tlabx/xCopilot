name: Telegram Notifications - xCopilot

on:
  push:
    branches: [ master, dev, pr-* ]
  pull_request:
    types: [opened, closed, synchronize]
  release:
    types: [published]
  workflow_run:
    workflows: ["Build and Test"]
    types: [completed]

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect Info
        id: info
        run: |
          echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "actor=${GITHUB_ACTOR}" >> $GITHUB_OUTPUT
          echo "repo=${GITHUB_REPOSITORY}" >> $GITHUB_OUTPUT

      - name: Build Message
        id: msg
        run: |
          EVENT="${{ github.event_name }}"
          MSG=""
          if [ "$EVENT" = "push" ]; then
            MSG="[xCopilot] PUSH\nBranch: ${{ steps.info.outputs.branch }}\nAutor: ${{ steps.info.outputs.actor }}\nCommit: ${{ steps.info.outputs.short_sha }}\nMensagem: ${{ github.event.head_commit.message }}"
          elif [ "$EVENT" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            if [ "$ACTION" = "opened" ]; then
              MSG="[xCopilot] PR ABERTO #${{ github.event.number }}\nAutor: ${{ github.event.pull_request.user.login }}\nDe: ${{ github.event.pull_request.head.ref }} -> ${{ github.event.pull_request.base.ref }}\nTitulo: ${{ github.event.pull_request.title }}"
            elif [ "$ACTION" = "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                MSG="[xCopilot] PR MERGED #${{ github.event.number }}\nAutor: ${{ github.event.pull_request.user.login }}\nTitulo: ${{ github.event.pull_request.title }}"
              else
                MSG="[xCopilot] PR FECHADO #${{ github.event.number }}\nAutor: ${{ github.event.pull_request.user.login }}\nTitulo: ${{ github.event.pull_request.title }}"
              fi
            fi
          elif [ "$EVENT" = "release" ]; then
            MSG="[xCopilot] RELEASE ${{ github.event.release.tag_name }}\nNome: ${{ github.event.release.name }}\nAutor: ${{ github.event.release.author.login }}"
          elif [ "$EVENT" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              MSG="[xCopilot] BUILD OK\nWorkflow: ${{ github.event.workflow_run.name }}\nBranch: ${{ github.event.workflow_run.head_branch }}"
            else
              MSG="[xCopilot] BUILD FAIL\nWorkflow: ${{ github.event.workflow_run.name }}\nBranch: ${{ github.event.workflow_run.head_branch }}"
            fi
          fi
          SAFE=$(printf '%s' "$MSG" | sed 's/"/\"/g')
          echo "text=$SAFE" >> $GITHUB_OUTPUT

      - name: Send Telegram
        if: steps.msg.outputs.text != ''
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\n  \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",\n  \"text\": \"${{ steps.msg.outputs.text }}\"\n}"

      - name: Send Status
        if: always()
        run: |
          STATUS="OK"; [ "${{ job.status }}" = "success" ] || STATUS="FALHA"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\n  \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",\n  \"text\": \"[xCopilot] Status envio: $STATUS\"\n}"
