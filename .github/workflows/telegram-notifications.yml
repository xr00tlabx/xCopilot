name: üöÄ Telegram Notifications - xCopilot

on:
  push:
    branches: [ master, dev, pr-* ]
  pull_request:
    types: [opened, closed, synchronize]
  release:
    types: [published]
  workflow_run:
    workflows: ["Build and Test"]
    types: [completed]

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    name: üì± Send Telegram Notification
    
    steps:
    - name: üîÑ Checkout Code
      uses: actions/checkout@v4
      
  - name: üõ†Ô∏è Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
  - name: üìä Get Project Info
      id: project_info
      run: |
        echo "commit_hash=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        echo "repo_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
        echo "author_name=${GITHUB_ACTOR}" >> $GITHUB_OUTPUT
        
    - name: üìù Create Notification Message
      id: message
      run: |
          build_msg() {
            case "$1" in
              push)
                cat <<'TXT'
  üî• *NOVO PUSH* no xCopilot!
  üåø *Branch:* `${{ steps.project_info.outputs.branch_name }}`
  üë§ *Author:* ${{ steps.project_info.outputs.author_name }}
  üîó *Commit:* `${{ steps.project_info.outputs.commit_hash }}`

  üìù *Mensagem:*
  ${{ github.event.head_commit.message }}

  üîó [Ver no GitHub](${{ github.event.compare }})
  TXT
                ;;
              pr_open)
                cat <<'TXT'
  üéØ *NOVO PULL REQUEST* no xCopilot!
  üÜî *PR #${{ github.event.number }}*
  üë§ *Author:* ${{ github.event.pull_request.user.login }}
  üåø *Branch:* `${{ github.event.pull_request.head.ref }}` ‚Üí `${{ github.event.pull_request.base.ref }}`

  üìù *T√≠tulo:*
  ${{ github.event.pull_request.title }}

  üîó [Revisar PR](${{ github.event.pull_request.html_url }})
  TXT
                ;;
              pr_merged)
                cat <<'TXT'
  ‚úÖ *PR MERGED* no xCopilot!
  üÜî *PR #${{ github.event.number }}*
  üë§ *Author:* ${{ github.event.pull_request.user.login }}
  üåø *Branch:* `${{ github.event.pull_request.head.ref }}` ‚Üí `${{ github.event.pull_request.base.ref }}`

  üìù *T√≠tulo:*
  ${{ github.event.pull_request.title }}

  üéâ *Status:* MERGED com sucesso!
  TXT
                ;;
              pr_closed)
                cat <<'TXT'
  ‚ùå *PR FECHADO* no xCopilot!
  üÜî *PR #${{ github.event.number }}*
  üë§ *Author:* ${{ github.event.pull_request.user.login }}

  üìù *T√≠tulo:*
  ${{ github.event.pull_request.title }}

  ‚ö†Ô∏è *Status:* Fechado sem merge
  TXT
                ;;
              release)
                cat <<'TXT'
  üöÄ *NOVA RELEASE* do xCopilot!
  üè∑Ô∏è *Vers√£o:* ${{ github.event.release.tag_name }}
  üë§ *Author:* ${{ github.event.release.author.login }}

  üìù *Nome:*
  ${{ github.event.release.name }}

  üîó [Download Release](${{ github.event.release.html_url }})
  TXT
                ;;
              build_ok)
                cat <<'TXT'
  ‚úÖ *BUILD SUCCESS* no xCopilot!
  üîÑ *Workflow:* ${{ github.event.workflow_run.name }}
  üåø *Branch:* `${{ github.event.workflow_run.head_branch }}`
  üë§ *Author:* ${{ github.event.workflow_run.head_commit.author.name }}

  ‚ú® *Status:* Compila√ß√£o bem-sucedida!
  TXT
                ;;
              build_fail)
                cat <<'TXT'
  ‚ùå *BUILD FAILED* no xCopilot!
  üîÑ *Workflow:* ${{ github.event.workflow_run.name }}
  üåø *Branch:* `${{ github.event.workflow_run.head_branch }}`
  üë§ *Author:* ${{ github.event.workflow_run.head_commit.author.name }}

  ‚ö†Ô∏è *Status:* Falha na compila√ß√£o!
  TXT
                ;;
            esac
          }

          if [[ "${{ github.event_name }}" == "push" ]]; then RAW_MSG="$(build_msg push)"; fi
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.action }}" == "opened" ]]; then RAW_MSG="$(build_msg pr_open)"; fi
            if [[ "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then RAW_MSG="$(build_msg pr_merged)"; fi
            if [[ "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" != "true" ]]; then RAW_MSG="$(build_msg pr_closed)"; fi
          fi
          if [[ "${{ github.event_name }}" == "release" ]]; then RAW_MSG="$(build_msg release)"; fi
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then RAW_MSG="$(build_msg build_ok)"; else RAW_MSG="$(build_msg build_fail)"; fi
          fi

          # Escape completo para MarkdownV2 (documentado pelo Telegram)
          ESCAPED=$(printf "%s" "$RAW_MSG" | sed -E 's/([_\*\[\]\(\)~`>#+=|{}\.\!-])/\\\\\1/g')
          echo "telegram_message<<EOF" >> $GITHUB_OUTPUT
          echo "$ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
  - name: üì± Send to Telegram
      if: steps.message.outputs.telegram_message != ''
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{
            \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
            \"text\": \"${{ steps.message.outputs.telegram_message }}\",
            \"parse_mode\": \"MarkdownV2\",
            \"disable_web_page_preview\": true
          }"
        
  - name: üéØ Send Status Update
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          STATUS_MESSAGE="‚úÖ Notifica√ß√£o enviada com sucesso para o Telegram!"
        else
          STATUS_MESSAGE="‚ùå Falha ao enviar notifica√ß√£o para o Telegram!"
        fi
        
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{
            \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
            \"text\": \"ü§ñ *xCopilot CI/CD*\\n\\n$STATUS_MESSAGE\",
            \"parse_mode\": \"MarkdownV2\"
          }"
