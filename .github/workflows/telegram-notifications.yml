name: Telegram Notifications - xCopilot

on:
  push:
    branches: [ master, dev, pr-* ]
  pull_request:
    types: [opened, closed, synchronize]
  release:
    types: [published]
  workflow_run:
    workflows: ["Build and Test"]
    types: [completed]

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect Info
        id: info
        run: |
          echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "actor=${GITHUB_ACTOR}" >> $GITHUB_OUTPUT
          echo "repo=${GITHUB_REPOSITORY}" >> $GITHUB_OUTPUT

      - name: Build Message
        id: msg
        run: |
          EVENT="${{ github.event_name }}"
          
          # Mensagens por tipo de evento
          if [ "$EVENT" = "push" ]; then
            TEXT="🚀 xCopilot: Push na ${{ steps.info.outputs.branch }} por ${{ steps.info.outputs.actor }} (commit ${{ steps.info.outputs.short_sha }})"
          elif [ "$EVENT" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            if [ "$ACTION" = "opened" ]; then
              TEXT="🎯 xCopilot: PR #${{ github.event.number }} aberto por ${{ github.event.pull_request.user.login }}"
            elif [ "$ACTION" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              TEXT="✅ xCopilot: PR #${{ github.event.number }} merged por ${{ github.event.pull_request.user.login }}!"
            elif [ "$ACTION" = "closed" ]; then
              TEXT="❌ xCopilot: PR #${{ github.event.number }} fechado sem merge"
            else
              TEXT="🔄 xCopilot: PR #${{ github.event.number }} atualizado"
            fi
          elif [ "$EVENT" = "release" ]; then
            TEXT="🚀 xCopilot: Release ${{ github.event.release.tag_name }} disponível!"
          elif [ "$EVENT" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              TEXT="✅ xCopilot: Build sucesso na ${{ github.event.workflow_run.head_branch }}"
            else
              TEXT="❌ xCopilot: Build falhou na ${{ github.event.workflow_run.head_branch }}"
            fi
          else
            TEXT="🤖 xCopilot: Evento $EVENT detectado no repositório"
          fi
          
          echo "text=$TEXT" >> $GITHUB_OUTPUT
          echo "Mensagem: $TEXT"

      - name: Send Telegram
        if: steps.msg.outputs.text != ''
        run: |
          MESSAGE="${{ steps.msg.outputs.text }}"
          echo "Enviando: $MESSAGE"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": \"$MESSAGE\"}"

      - name: Send Status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_MSG="[xCopilot] Notificacao enviada com sucesso"
          else
            STATUS_MSG="[xCopilot] Falha no envio da notificacao"
          fi
          echo "Status: $STATUS_MSG"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": \"$STATUS_MSG\"}"
